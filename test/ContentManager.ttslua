local CardModel = require('src/DeckGenerator/CardModel')
local DeckAsset = require('src/DeckGenerator/DeckAsset')
local DeckModel = require('src/DeckGenerator/DeckModel')
local DeckGenerator = require('src/DeckGenerator/DeckGenerator')
local ContentManager = require("src/ContentManager");

---
--- Generated by Luanalysis
--- Created by PolyphonyRequiem.
--- DateTime: 7/30/2020 2:22 PM
---

local test = function()
  local base_v2 = "https://raw.githubusercontent.com/TwilightImperiumContentCreators/TTS-TwilightImperium/master/content-packages/base-v2.json";
  print ('fetching from ' ..  base_v2);
  WebRequest.get(base_v2, handleRequest);
end

---@param request tts__WebRequest
function handleRequest (request)
  print ('handling request');

  if request.is_done then

    local contentManager = ContentManager:new();

    ---@type ContentPackage
    local package = JSON.decode(request.text);
    contentManager:addContentPackage(package);

    local content = contentManager:flatten();
    local deckGenerator = DeckGenerator()
    local asset = DeckAsset(
            package.assets.decks.objectives_secret.frontUri,
            package.assets.decks.objectives_secret.backUri,
            package.assets.decks.objectives_secret.columns,
            package.assets.decks.objectives_secret.rows,
            false,
            package.assets.decks.objectives_secret.isSingleImageBack)

    local cards = {}
    for _,v in ipairs(package.content.decks.objectives_secret.cards) do
        table.insert(cards, CardModel(v.name, v.text))
    end

    local deck = DeckModel(package.assets.decks.objectives_secret.displayName, package.assets.decks.objectives_secret.tooltip, cards, asset)
    local deckObject = deckGenerator.Spawn(deck)
  end
end

return test
