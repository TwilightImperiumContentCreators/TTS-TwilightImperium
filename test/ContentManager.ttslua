local CardModel = require('src/DeckGenerator/CardModel')
local DeckAsset = require('src/DeckGenerator/DeckAsset')
local DeckModel = require('src/DeckGenerator/DeckModel')
local DeckGenerator = require('src/DeckGenerator/DeckGenerator')
local ContentManager = require("src/ContentManager");

---
--- Generated by Luanalysis
--- Created by PolyphonyRequiem.
--- DateTime: 7/30/2020 2:22 PM
---

local test = function()
  local base_v2 = "https://raw.githubusercontent.com/TwilightImperiumContentCreators/TTS-TwilightImperium/master/content-packages/base-v2.json";
  print ('fetching from ' ..  base_v2);
  WebRequest.get(base_v2, handleRequest);
end

---@param request tts__WebRequest
function handleRequest (request)
  print ('handling request');

  if request.is_done then

    local contentManager = ContentManager:new();

    ---@type ContentPackage
    local package = JSON.decode(request.text);
    contentManager:addContentPackage(package);

    --local content = contentManager:flatten();

    local deckGenerator = DeckGenerator()

    local transform = {
      posX = 0, posY = 0, posZ = 0,
      rotX = 0, rotY = 0, rotZ = 0,
      scaleX = 1, scaleY = 1, scaleZ = 1
    }

    for k in pairs(package.content.decks) do
      local asset = DeckAsset(
              package.assets.decks[k].frontUri,
              package.assets.decks[k].backUri,
              package.assets.decks[k].columns,
              package.assets.decks[k].rows,
              false,
              package.assets.decks[k].isSingleImageBack)

      local cards = {}
      for _,v in ipairs(package.content.decks[k].cards) do
        table.insert(cards, CardModel(v.name, v.text))
      end

      local deck = DeckModel(package.assets.decks[k].displayName, package.assets.decks[k].tooltip, cards, asset)
      local deckObject = deckGenerator.Spawn(deck, transform)
      transform.posX = transform.posX + 5.0
    end
  end
end

return test
